{"version":3,"sources":["Broker.js"],"names":[],"mappings":"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","file":"Broker.js","sourcesContent":["\"use strict\";\n/* global require */\n/* global Buffer */\n\nrequire('babel-polyfill');\nconst EventEmitter = require('events'),\n    zmq = require('zmq'),\n    MDP02 = require('./mdp02');\n\n\nconst events = {\n        EV_MESSAGE: 'message',\n        EV_ERR: 'error',\n        EV_REQ: 'request',\n        EV_HB: 'heartbeat',\n        EV_DISCONNECT: 'worker-disconnect',\n        EV_WREADY: 'worker-ready',\n        EV_WFINAL: 'worker-final-data',\n        EV_WPARTIAL: 'worker-partial-data',\n        EV_RES: 'response'\n    },\n    READY = true,\n    IN_USE = false;\n\nfunction protocolError(broker, frames) {\n    broker.emitErr(new MDP02.E_PROTOCOL('Wrong frames number', frames));\n}\n\nfunction prepareClientMessageStrategies() {\n    let strategies = {};\n\n    strategies[MDP02.C_REQUEST] = (broker, socketId, frames) => {\n        if (frames.length < 3) {\n            protocolError(broker);\n        } else {\n            let serviceName = frames[2].toString(),\n                command = frames.slice(3);\n            broker.emit(events.EV_REQ, {socketId: socketId, service: serviceName, data: command});\n            broker.enqueueRequest(socketId, serviceName, command);\n        }\n    };\n\n    strategies[events.EV_ERR] = (broker, socketId, frames) => {\n        protocolError(broker, frames);\n    };\n\n    return strategies;\n}\n\nfunction prepareWorkerMessageStrategies() {\n    let strategies = {};\n\n    strategies[MDP02.W_HEARTBEAT] = (broker, socketId, frames) => {\n        let worker = broker.workers[socketId];\n        if (frames.length !== 2) {\n            protocolError(broker, frames);\n        } else {\n            broker.emit(events.EV_HB, {socketId: socketId, service: worker.service});\n            broker._sendHeartBeat(socketId);\n        }\n    };\n\n    strategies[MDP02.W_DISCONNECT] = (broker, socketId, frames) => {\n        let worker = broker.workers[socketId];\n        if (frames.length !== 2) {\n            protocolError(broker, frames);\n        } else {\n            broker.removeWorker(worker);\n            broker.emit(events.EV_DISCONNECT, {socketId: socketId, service: worker.service});\n        }\n    };\n\n    strategies[MDP02.W_READY] = (broker, socketId, frames) => {\n        // let worker = broker.workers[socketId];\n        if (frames.length !== 3) {\n            protocolError(broker, frames);\n        } else {\n            let serviceName = frames[2].toString();\n            broker.addWorker(socketId, serviceName);\n            broker.emit(events.EV_WREADY, {socketId: socketId, service: serviceName});\n            broker.fulfillRequests();\n        }\n    };\n\n    strategies[MDP02.W_FINAL] = (broker, socketId, frames) => {\n        let worker = broker.workers[socketId];\n        if (frames.length >= 5) {\n            let clientSocketId = JSON.stringify(frames[2]),\n                data = frames.slice(4);\n            broker.emit(events.EV_WFINAL, {socketId: socketId, service: worker.service, data: data});\n            broker.socket.send([Buffer.from(JSON.parse(clientSocketId)), MDP02.CLIENT, MDP02.C_FINAL, worker.service, data]);\n            broker.changeWorkerStatus(worker, READY);\n            clientSocketId && delete broker.requests[clientSocketId];\n            broker.fulfillRequests();\n        } else {\n            protocolError(broker, frames);\n        }\n    };\n\n    strategies[MDP02.W_PARTIAL] = (broker, socketId, frames) => {\n        let worker = broker.workers[socketId];\n        if (frames.length >= 5) {\n            let clientSocketId = JSON.stringify(frames[2]),\n                data = frames.slice(4);\n            broker.emit(events.EV_WPARTIAL, {socketId: socketId, service: worker.service, data: data});\n            broker.socket.send([Buffer.from(JSON.parse(clientSocketId)), MDP02.CLIENT, MDP02.C_PARTIAL, worker.service, data]);\n        } else {\n            protocolError(broker, frames);\n        }\n    };\n    strategies[events.EV_ERR] = (broker, socketId, frames) => {\n        protocolError(broker, frames);\n    };\n    return strategies;\n}\n\nconst WORKER_MESSAGE_STRATEGIES = prepareWorkerMessageStrategies(),\n    CLIENT_MESSAGE_STRATEGIES = prepareClientMessageStrategies(this);\n\nclass Broker extends EventEmitter {\n    \n    emitErr(err) {\n        setImmediate(() => {\n            this.emit(events.EV_ERR, err);\n        });\n    }\n\n    send(msg, partial) {\n        this._sendMsg(msg, partial);\n    }\n\n    start() {\n        if (this.socket) {\n            return false;\n        } else {\n            this.socket = zmq.socket('router');\n            this.workers = {};\n            this.services = {};\n            this.socket.on('message', (...args) => {\n                this.emit(events.EV_MESSAGE, args);\n                try {\n                    this._onMsg(args);\n                } catch (err) {\n                    this.emitErr(err);\n                }\n            });\n            this.socket.on('error', (err) => {\n                this.emitErr(err);\n            });\n            this.addresses.forEach((addr) => {\n                this.socket.bind(addr);\n            });\n            return true;\n        }\n    }\n\n    stop() {\n        if (this.socket) {\n            this.requests = {};\n            this.workers = {};\n            this.services = {};\n            this.socket.removeAllListeners();\n            this.socket.close();\n            delete this.socket;\n            delete this._currentClient;\n        }\n    }\n\n    _onMsg(rep) {\n        this.cleanupWorkersAndRequests();\n        let socketId = JSON.stringify(rep[0]),\n            frames = rep.slice(1),\n            header = frames[0].toString();\n        switch (header) {\n            case MDP02.CLIENT:\n                this._onClientMsg(socketId, frames);\n                break;\n            case MDP02.WORKER:\n                this._onWorkerMsg(socketId, frames);\n                break;\n            default:\n                protocolError(this, frames);\n        }\n\n    }\n\n    _onWorkerMsg(socketId, frames) {\n        let messageType = frames[1].toString(),\n            worker = this.workers[socketId];\n        if (worker || messageType === MDP02.W_READY) {\n            let strategy = WORKER_MESSAGE_STRATEGIES[messageType];\n\n            if (strategy !== undefined) {\n                if (worker !== undefined) worker.ts = Date.now();\n                strategy(this, socketId, frames);\n            } else {\n                WORKER_MESSAGE_STRATEGIES[events.EV_ERR](this, socketId, frames)\n            }\n        }\n    }\n\n    _onClientMsg(socketId, frames) {\n        let messageType = frames[1].toString(),\n            strategy = CLIENT_MESSAGE_STRATEGIES[messageType];\n\n        if (strategy !== undefined) {\n            strategy(this, socketId, frames);\n        } else {\n            CLIENT_MESSAGE_STRATEGIES[events.EV_ERR](this, socketId, frames)\n        }\n\n    }\n\n    changeWorkerStatus(worker, ready) {\n        let serviceName = worker.service,\n            socketId = worker.socketId;\n        if (ready === READY) {\n            if (this.services[serviceName] === undefined) {\n                this.services[serviceName] = [socketId];\n            } else {\n                this.services[serviceName].push(socketId);\n            }\n        } else if (ready === IN_USE && this.services[serviceName]) {\n            let ixWorker = this.services[serviceName].indexOf(socketId);\n            if (ixWorker >= 0) {\n                this.services[serviceName].splice(ixWorker, 1);\n            }\n        }\n    }\n\n    _sendHeartBeat(socketId) {\n        this.socket.send([\n            Buffer.from(JSON.parse(socketId)),\n            MDP02.WORKER,\n            MDP02.W_HEARTBEAT\n        ]);\n    }\n\n    _sendDisconnect(socketId) {\n        this.socket.send([\n            Buffer.from(JSON.parse(socketId)),\n            MDP02.WORKER,\n            MDP02.W_DISCONNECT\n        ]);\n    }\n\n    enqueueRequest(socketId, serviceName, command) {\n        if (!this.requests[socketId]) {\n            this.requests[socketId] = {\n                ts: Date.now(),\n                socketId: socketId,\n                service: serviceName,\n                message: command,\n                served: false\n            };\n            this.fulfillRequests();\n        }\n    }\n\n    fulfillRequests() {\n        Object.keys(this.requests).forEach((socketId) => {\n            let request = this.requests[socketId];\n            if (!request.served) {\n                this.serveRequest(request);\n            }\n        });\n    }\n\n    serveRequest(request) {\n        let serviceName = request.service,\n            worker;\n        if (this.services[serviceName] && this.services[serviceName].length) {\n            let socketId = this.services[serviceName][0];\n            worker = this.workers[socketId];\n            if (worker) {\n                this.changeWorkerStatus(worker, IN_USE);\n                request.served = true;\n                this.socket.send([\n                    Buffer.from(JSON.parse(worker.socketId)), MDP02.WORKER, MDP02.W_REQUEST,\n                    Buffer.from(JSON.parse(request.socketId)), ''\n                ].concat(request.message));\n            }\n        }\n    }\n\n    addWorker(socketId, serviceName) {\n        if (!this.workers[socketId]) {\n            let worker = {\n                ts: Date.now(),\n                socketId: socketId,\n                service: serviceName\n            };\n            this.workers[socketId] = worker;\n            this.changeWorkerStatus(worker, READY);\n        }\n    }\n\n    removeWorker(worker) {\n        this.changeWorkerStatus(worker, IN_USE);\n        delete this.workers[worker.socketId];\n    }\n\n    cleanupWorkersAndRequests() {\n        let now = Date.now(),\n            currentClient, currentWorker,\n            workerTimeout = this.workerTimeout,\n            clientTimeout = this.clientTimeout;\n        Object.keys(this.requests).forEach((socketId) => {\n            currentClient = this.requests[socketId];\n            if (now - currentClient.ts > clientTimeout) {\n                delete this.requests[socketId];\n            }\n        });\n        Object.keys(this.workers).forEach((socketId) => {\n            currentWorker = this.workers[socketId];\n            if (now - currentWorker.ts > workerTimeout) {\n                this._sendDisconnect(socketId);\n                this.removeWorker(currentWorker);\n            }\n        });\n    }\n\n}\n\nfunction makeBroker(props) {\n    let broker = new Broker();\n    Object.assign(broker, {\n        workerTimeout: MDP02.TIMEOUT,\n        clientTimeout: MDP02.TIMEOUT,\n        requests: {},\n        workers: {},\n        services: {}\n    }, props);\n\n    ['SIGTERM', 'SIGINT', 'exit'].forEach((signal) => process.on(signal, () => broker.stop()));\n    return broker;\n}\n\nmodule.exports = makeBroker;\nmodule.exports.events = events;\n\n\n\n// Object.defineProperties(Broker, {\n//     workerTimeout: {\n//         value: MDP02.TIMEOUT,\n//         writable: true\n//     },\n//     clientTimeout: {\n//         value: MDP02.TIMEOUT,\n//         writable: true\n//     }\n// });\n"],"sourceRoot":"../src"}