{"version":3,"sources":["Client.js"],"names":[],"mappings":"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","file":"Client.js","sourcesContent":["/* global require */\n/* global setImmediate */\n\nrequire('babel-polyfill');\nconst EventEmitter = require('events'),\n    zmq = require('zmq'),\n    MDP02 = require('./mdp02');\n\nconst events = {\n    EV_ERR: 'error',\n    // EV_ERR_TIMEOUT: 'timeoutError',  -----not used\n    EV_TIMEOUT: 'timeout',\n    EV_DATA: 'data',\n    EV_END: 'end'\n};\n\nclass Client extends EventEmitter {\n    createSocket() {\n        if (this.socket) {\n            this.socket.removeAllListeners();\n            this.socket.close();\n        }\n        this.socket = zmq.socket('dealer');\n        this.socket.on('message', (...args) => {\n\n            try {\n                this._onMsg(args);\n            } catch (err) {\n                this.emitErr(err);\n            }\n        });\n\n        this.socket.on('error', (err) => this.emitErr(err));\n        this.socket.connect(this.address);\n    }\n\n    emitErr(err) {\n        this.emit(events.EV_ERR, err);\n        clearInterval(this.reqTimer);\n        delete this.reqTimer;\n        this.stop();\n    }\n\n    _intervalFunction() {\n        if (this._tries < this.maxRetries) {\n            this.stop(true);\n            this.start();\n            this._sendMsg(this._currentMessage);\n            this._tries++;\n        } else {\n            this.emitErr(new MDP02.E_TIMEOUT('Timeout'));\n        }\n    }\n\n    send(service, msg) {\n        this._service = service;\n        if (this.reqTimer || !this._service) {\n            return false;\n        } else {\n            clearInterval(this.reqTimer);\n            delete this.reqTimer;\n            this._service = service;\n            this._currentMessage = msg;\n            this._tries = 0;\n\n            this.start();\n            setImmediate(() => this._sendMsg(msg));\n            this._sendMsg(msg);\n            this.reqTimer = setInterval(() => this._intervalFunction(), this.timeout);\n\n            return true;\n        }\n    }\n\n    start() {\n        if (!this.connected) {\n            this.createSocket();\n            this.connected = true;\n        }\n        return this;\n    }\n\n    stop(keepInterval) {\n        if (this.connected) {\n            if (!keepInterval) {\n                clearInterval(this.reqTimer);\n                delete this.reqTimer;\n            }\n            this.socket.removeAllListeners();\n            this.socket.close();\n            this.connected = false;\n            delete this.socket;\n        }\n        return this;\n    }\n\n    _isValid(rep) {\n        if (!Array.isArray(rep) || rep.length < 4) {\n            this.emitErr(new MDP02.E_PROTOCOL('Wrong frames number'));\n            return false;\n        }\n        let protocol = rep[0].toString(),\n            messageType = rep[1].toString(),\n            service = rep[2].toString();\n\n        if ((protocol !== MDP02.CLIENT) || ![MDP02.C_PARTIAL, MDP02.C_FINAL].find(messageType) ||\n            (service !== this._service)) {\n            this.emitErr(new MDP02.E_PROTOCOL(MDP02.dumpFrames(rep)));\n            return false;\n        }\n\n        return true;\n    }\n\n    _onMsg(rep) {\n        if (this._isValid(rep)) {\n            clearInterval(this.reqTimer);\n            delete this.reqTimer;\n            let messageType = rep[1].toString(),\n                responseData = rep.slice(3);\n\n            this._tries = 0;\n            if (messageType === MDP02.C_PARTIAL) {\n                this.reqTimer = setInterval(() => this._intervalFunction(), this.timeout);\n            } else { //MDP02.C_FINAL\n                this._tries = 0;\n                this._currentMessage = null;\n            }\n            this.emit(events.EV_DATA, {messageType: messageType, data: responseData});\n            if (messageType === MDP02.C_FINAL) {\n                this.emit(events.EV_END, {messageType: messageType, data: responseData});\n            }\n        }\n    }\n\n    _sendMsg(msg) {\n        this.socket.send([\n            MDP02.CLIENT, MDP02.C_REQUEST, this._service,\n            msg\n        ]);\n    }\n\n}\n\nfunction makeClient(props) {\n    let client = new Client();\n\n    Object.assign(client, {\n        timeout: MDP02.TIMEOUT\n    }, props);\n\n    ['SIGTERM', 'SIGINT', 'exit'].forEach((signal) => process.on(signal, () => client.stop()));\n    return client;\n}\n\nmodule.exports = makeClient;\nmodule.exports.events = events;\n\n\n"],"sourceRoot":"../src"}