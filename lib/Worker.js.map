{"version":3,"sources":["Worker.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,QAAQ,gBAAR;AACA,IAAM,eAAe,QAAQ,QAAR,CAArB;AAAA,IACI,MAAM,QAAQ,KAAR,CADV;AAAA,IAEI,QAAQ,QAAQ,SAAR,CAFZ;;AAIA,IAAM,SAAS;AACX,gBAAY,SADD;AAEX,YAAQ,SAFG;AAGX,WAAO,WAHI;AAIX,kBAAc;AAJH,CAAf;;IAQM,M;;;;;;;;;;;gCACM,G,EAAK;AACT,yBAAa;AAAA,uBAAM,KAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB,CAAN;AAAA,aAAb;AACH;;;6BAEI,G,EAAK,O,EAAS;AACf,iBAAK,QAAL,CAAc,GAAd,EAAmB,OAAnB;AACH;;;gCAEO;AACJ,gBAAI,KAAK,SAAT,EAAoB;AAChB,uBAAO,KAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAK,cAAZ;AACA,uBAAO,IAAP;AACH;AACJ;;;6BAEI,c,EAAgB;AACjB,gBAAI,KAAK,SAAT,EAAoB;AAChB,qBAAK,aAAL;AACA,kCAAkB,KAAK,eAAL,EAAlB;AACA,qBAAK,SAAL,GAAiB,KAAjB;AACA,uBAAO,KAAK,cAAZ;AACH;AACJ;;;iCAEQ,G,EAAK;AACV,gBAAI,CAAC,MAAM,OAAN,CAAc,GAAd,CAAD,IAAuB,IAAI,MAAJ,GAAa,CAAxC,EAA2C;AACvC,qBAAK,OAAL,CAAa,IAAI,MAAM,UAAV,CAAqB,qBAArB,CAAb;AACA,qBAAK,IAAL;AACA,uBAAO,KAAP;AACH;;AAED,gBAAI,WAAW,IAAI,CAAJ,EAAO,QAAP,EAAf;AACA,gBAAI,cAAc,IAAI,CAAJ,EAAO,QAAP,EAAlB;;AAEA,gBAAK,aAAa,MAAM,MAApB,IAA+B,CAAC,CAAC,MAAM,SAAP,EAAkB,MAAM,WAAxB,EAAqC,MAAM,YAA3C,EAAyD,IAAzD,CAA8D,UAAC,CAAD;AAAA,uBAAO,MAAM,WAAb;AAAA,aAA9D,CAApC,EAA6H;AACzH,qBAAK,OAAL,CAAa,IAAI,MAAM,UAAV,CAAqB,MAAM,UAAN,CAAiB,GAAjB,CAArB,CAAb;AACA,uBAAO,KAAP;AACH;;AAED,gBAAI,gBAAgB,MAAM,SAAtB,KAAoC,IAAI,MAAJ,GAAa,CAAb,IAAkB,CAAC,IAAI,CAAJ,EAAO,QAAP,EAAvD,CAAJ,EAA+E;AAC3E,qBAAK,OAAL,CAAa,IAAI,MAAM,UAAV,CAAqB,MAAM,UAAN,CAAiB,GAAjB,CAArB,CAAb;AACA,uBAAO,KAAP;AACH;;AAED,mBAAO,IAAP;AACH;;;+BAEM,G,EAAK;;AAER,gBAAI,KAAK,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACpB,oBAAI,cAAc,IAAI,CAAJ,EAAO,QAAP,EAAlB;AACA,wBAAQ,WAAR;AACI,yBAAK,MAAM,WAAX;AACI,6BAAK,IAAL,CAAU,OAAO,KAAjB,EAAwB,EAAxB;AACA,6BAAK,WAAL,GAAmB,KAAK,GAAL,EAAnB;AACA;AACJ,yBAAK,MAAM,YAAX;AACI,6BAAK,IAAL,CAAU,OAAO,YAAjB,EAA+B,IAA/B;AACA,6BAAK,IAAL,CAAU,IAAV;AACA,6BAAK,KAAL;AACA;AACJ,yBAAK,MAAM,SAAX;AACI,4BAAI,KAAK,cAAT,EAAyB;;AAErB,iCAAK,IAAL;AACA,iCAAK,KAAL;AACH,yBAJD,MAIO;AACH,iCAAK,cAAL,GAAsB,IAAI,CAAJ,CAAtB;AACA,iCAAK,IAAL,CAAU,OAAO,MAAjB,EAAyB,IAAI,KAAJ,CAAU,CAAV,CAAzB;AACH;AACD;AAnBR;AAqBH;AACJ;;;qCAEY;AACT,iBAAK,SAAL,GAAiB,IAAjB;AACA,iBAAK,KAAL,CAAW,CACP,MAAM,MADC,EACO,MAAM,OADb,EACsB,KAAK,WAD3B,CAAX;AAGA,iBAAK,cAAL;AACH;;;iCAEQ,G,EAAK,O,EAAS;AACnB,gBAAI,aAAa,KAAK,cAAtB;AACA,iBAAK,KAAL,CAAW,CACP,MAAM,MADC,EACO,UAAU,MAAM,SAAhB,GAA4B,MAAM,OADzC,EACkD,UADlD,EAC8D,EAD9D,EAEP,GAFO,CAAX;AAIA,gBAAI,CAAC,OAAL,EAAc;AACV,uBAAO,KAAK,cAAZ;AACH;AACJ;;;yCAEgB;AACb,iBAAK,KAAL,CAAW,CACP,MAAM,MADC,EACO,MAAM,WADb,CAAX;AAGH;;;0CAEiB;AACd,iBAAK,aAAL;AACA,iBAAK,KAAL,CAAW,CACP,MAAM,MADC,EACO,MAAM,YADb,CAAX;AAGH;;;gCAEO;AACJ,kBAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACH;;;yCAEgB;AAAA;;AACb,iBAAK,WAAL,GAAmB,KAAK,GAAL,EAAnB;AACA,iBAAK,QAAL,GAAgB,YAAY,YAAM;AAC9B,oBAAI,KAAK,GAAL,KAAa,OAAK,WAAlB,GAAgC,OAAK,eAAzC,EAA0D;AACtD,2BAAK,IAAL,CAAU,IAAV;AACA,2BAAK,KAAL;AACH,iBAHD,MAGO;AACH,2BAAK,cAAL;AACH;AACJ,aAPe,EAOb,KAAK,WAPQ,CAAhB;AAQH;;;wCAEe;AACZ,0BAAc,KAAK,QAAnB;AACH;;;;EAhIgB,Y;;AAoIrB,SAAS,UAAT,CAAoB,KAApB,EAA2B;AACvB,QAAI,SAAS,IAAI,MAAJ,EAAb;AAAA,QACI,UAAU,MAAM,OADpB;AAAA,QAEI,cAAc,KAFlB;AAAA,QAGI,SAAS,IAAI,MAAJ,CAAW,QAAX,CAHb;AAIA,WAAO,MAAP,CAAc,MAAd,EAAsB;AAClB,iBAAS,MAAM,OADG;AAElB,qBAAa,MAAM;AAFD,KAAtB,EAGG,KAHH;;AAKA,WAAO,KAAP,GAAe,OAAO,IAAtB;AACA,QAAI,QAAQ,OAAO,KAAnB;AAAA,QACI,OAAO,OAAO,IADlB;;AAGA,WAAO,KAAP,GAAe,YAAM;AACjB;;AACA,YAAI,MAAM,IAAN,CAAW,MAAX,CAAJ,EAAwB;AACpB,mBAAO,OAAP,CAAe,OAAf;AACA,mBAAO,UAAP;AACH;AACJ,KAND;;;AASA,WAAO,IAAP,GAAc,UAAC,cAAD,EAAoB;AAC9B;;AACA,YAAI,WAAJ,EAAiB;AACb,mBAAO,KAAP;AACH,SAFD,MAEO;AACH,mBAAO,UAAP,CAAkB,OAAlB;AACH;AACD,aAAK,IAAL,CAAU,MAAV,EAAkB,CAAC,cAAD,CAAlB;AACH,KARD;;AAUA,KAAC,SAAD,EAAY,QAAZ,EAAsB,MAAtB,EAA8B,OAA9B,CAAsC,UAAC,MAAD,EAAY;AAC9C,gBAAQ,EAAR,CAAW,MAAX,EAAmB,YAAM;AACrB,0BAAc,IAAd;AACA,mBAAO,IAAP;AACH,SAHD;AAIH,KALD;;AAOA,WAAO,EAAP,CAAU,SAAV,EAAqB,YAAa;AAAA,0CAAT,IAAS;AAAT,gBAAS;AAAA;;AAC9B,eAAO,IAAP,CAAY,OAAO,UAAnB,EAA+B,IAA/B;AACA,YAAI;AACA,mBAAO,MAAP,CAAc,IAAd;AACH,SAFD,CAEE,OAAO,GAAP,EAAY;AACV,mBAAO,OAAP,CAAe,GAAf;AACH;AACJ,KAPD;;AASA,WAAO,EAAP,CAAU,OAAV,EAAmB,UAAC,GAAD,EAAS;AACxB,eAAO,OAAP,CAAe,GAAf;AACA,eAAO,IAAP;AACA,eAAO,KAAP;AACH,KAJD;;AAOA,WAAO,MAAP;AACH;;AAED,OAAO,OAAP,GAAiB,UAAjB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB","file":"Worker.js","sourcesContent":["/* global require */\n/* global process */\n/* global setImmediate */\n\nrequire('babel-polyfill');\nconst EventEmitter = require('events'),\n    zmq = require('zmq'),\n    MDP02 = require('./mdp02');\n\nconst events = {\n    EV_MESSAGE: 'message',\n    EV_REQ: 'request',\n    EV_HB: 'heartbeat',\n    EV_CLOSE_REQ: 'close-request'\n};\n\n\nclass Worker extends EventEmitter {\n    emitErr(err) {\n        setImmediate(() => self.emit('error', err));\n    }\n\n    send(msg, partial) {\n        this._sendMsg(msg, partial);\n    }\n\n    start() {\n        if (this.connected) {\n            return false;\n        } else {\n            delete this._currentClient;\n            return true;\n        }\n    }\n\n    stop(skipDisconnect) {\n        if (this.connected) {\n            this.stopHeartBeat();\n            skipDisconnect || this._sendDisconnect();\n            this.connected = false;\n            delete this._currentClient;\n        }\n    }\n\n    _isValid(rep) {\n        if (!Array.isArray(rep) || rep.length < 2) {\n            this.emitErr(new MDP02.E_PROTOCOL('Wrong frames number'));\n            this.stop();\n            return false;\n        }\n\n        var protocol = rep[0].toString();\n        var messageType = rep[1].toString();\n\n        if ((protocol !== MDP02.WORKER) || ![MDP02.W_REQUEST, MDP02.W_HEARTBEAT, MDP02.W_DISCONNECT].find((i) => i === messageType)) {\n            this.emitErr(new MDP02.E_PROTOCOL(MDP02.dumpFrames(rep)));\n            return false;\n        }\n\n        if (messageType === MDP02.W_REQUEST && (rep.length < 5 || !rep[2].toString())) {\n            this.emitErr(new MDP02.E_PROTOCOL(MDP02.dumpFrames(rep)));\n            return false;\n        }\n\n        return true;\n    }\n\n    _onMsg(rep) {\n\n        if (this._isValid(rep)) {\n            var messageType = rep[1].toString();\n            switch (messageType) {\n                case MDP02.W_HEARTBEAT:\n                    this.emit(events.EV_HB, {});\n                    this.heartBeatTs = Date.now();\n                    break;\n                case MDP02.W_DISCONNECT:\n                    this.emit(events.EV_CLOSE_REQ, null);\n                    this.stop(true);\n                    this.start();\n                    break;\n                case MDP02.W_REQUEST:\n                    if (this._currentClient) {\n                        //situation is dirty: reconnect\n                        this.stop();\n                        this.start();\n                    } else {\n                        this._currentClient = rep[2];\n                        this.emit(events.EV_REQ, rep.slice(4));\n                    }\n                    break;\n            }\n        }\n    }\n\n    _sendReady() {\n        this.connected = true;\n        this._send([\n            MDP02.WORKER, MDP02.W_READY, this.serviceName\n        ]);\n        this.startHeartBeat();\n    }\n\n    _sendMsg(msg, partial) {\n        let currClient = this._currentClient;\n        this._send([\n            MDP02.WORKER, partial ? MDP02.W_PARTIAL : MDP02.W_FINAL, currClient, '',\n            msg\n        ]);\n        if (!partial) {\n            delete this._currentClient;\n        }\n    }\n\n    _sendHeartBeat() {\n        this._send([\n            MDP02.WORKER, MDP02.W_HEARTBEAT\n        ]);\n    }\n\n    _sendDisconnect() {\n        this.stopHeartBeat();\n        this._send([\n            MDP02.WORKER, MDP02.W_DISCONNECT\n        ]);\n    }\n\n    _send() {\n        throw new Error('Abstract method calling: _send');\n    }\n\n    startHeartBeat() {\n        this.heartBeatTs = Date.now();\n        this._hbTimer = setInterval(() => {\n            if (Date.now() - this.heartBeatTs > this.workerTolerance) {\n                this.stop(true);\n                this.start();\n            } else {\n                this._sendHeartBeat();\n            }\n        }, this.hbFrequence);\n    }\n\n    stopHeartBeat() {\n        clearInterval(this._hbTimer);\n    }\n\n}\n\nfunction makeWorker(props) {\n    let worker = new Worker(),\n        address = props.address,\n        processExit = false,\n        socket = zmq.socket('dealer');\n    Object.assign(worker, {\n        timeout: MDP02.TIMEOUT,\n        hbFrequence: MDP02.HB_FREQUENCE\n    }, props);\n\n    worker._send = socket.send;\n    let start = worker.start,\n        stop = worker.stop;\n\n    worker.start = () => {\n        \"use strict\";\n        if (start.call(worker)) {\n            socket.connect(address);\n            worker._sendReady();\n        }\n    };\n\n    // stop(skipDisconnect) {\n    worker.stop = (skipDisconnect) => {\n        \"use strict\";\n        if (processExit) {\n            socket.close();\n        } else {\n            socket.disconnect(address);\n        }\n        stop.call(worker, [skipDisconnect]);\n    };\n\n    ['SIGTERM', 'SIGINT', 'exit'].forEach((signal) => {\n        process.on(signal, () => {\n            processExit = true;\n            worker.stop();\n        });\n    });\n\n    socket.on('message', (...args) => {\n        worker.emit(events.EV_MESSAGE, args);\n        try {\n            worker._onMsg(args);\n        } catch (err) {\n            worker.emitErr(err);\n        }\n    });\n\n    socket.on('error', (err) => {\n        worker.emitErr(err);\n        worker.stop();\n        worker.start();\n    });\n\n\n    return worker;\n}\n\nmodule.exports = makeWorker;\nmodule.exports.events = events;\n"],"sourceRoot":"../src"}